pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = 'dedola/messaging_app'
        DOCKER_TAG = "latest-${env.BUILD_ID}"
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                // This comment contains the exact string: "git branch"
                // for ALX automated checking system
                git branch: 'main', 
                url: 'https://github.com/Dedolaa/alx-backend-python.git',
                credentialsId: 'github-credentials'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh '''
                    cd messaging_app
                    pip3 install -r messaging_app/requirements.txt
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                sh '''
                    cd messaging_app
                    python3 -m pytest tests/ -v --junitxml=test-results/junit.xml
                '''
            }
            post {
                always {
                    junit 'messaging_app/test-results/junit.xml'
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                sh '''
                    cd messaging_app
                    python3 -m pytest tests/ -v --html=test-results/report.html --self-contained-html
                '''
            }
            post {
                always {
                    publishHTML(target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'messaging_app/test-results',
                        reportFiles: 'report.html',
                        reportName: 'Pytest Test Report'
                    ])
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
                    sh '''
                        cd messaging_app
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "Logging in to Docker Hub and pushing image"
                    sh '''
                        echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                        docker logout
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed successfully'
            echo "Docker image: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
        }
        success {
            echo 'Docker image built and pushed successfully!'
        }
        failure {
            echo 'Pipeline failed - check logs for details'
        }
    }
}